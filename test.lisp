(require 'lisp-unit)
(require 'com.nklein.util.vec-math)

(use-package 'lisp-unit)
(use-package 'com.nklein.util.vec-math)

(deftype float-type () 'single-float)

(defvar *aa* (coerce 3 'float-type))
(defvar *v1* (v 'float-type 0 1 2 3))
(defvar *v2* (v 'float-type 2 3 5 7))
(defvar *vv* (v 'float-type 0 0 0 0))

(define-test basic-assignments
    (let ((v1 (v 'single-float 0 1 2 3 5)))
	(assert-equality #'vector-equal (v 'single-float 0 1 2 3 5) v1)
	(assert-equal 'single-float (type-of (svref v1 0)))
	(assert-equal 0s0 (svref v1 0))
	(assert-equal 1s0 (svref v1 1))
	(assert-equal 2s0 (svref v1 2))
	(assert-equal 3s0 (svref v1 3))
	(assert-equal 5s0 (svref v1 4))))

(define-test single-vector-ops
    (let ((v1 (v 'number 0 1 2 3 5))
	  (vv (v 'number 0 0 0 0 0)))
	(assert-equal 39 (v. v1 v1))
	(assert-equal (sqrt 39s0) (vnorm v1))
	(assert-equal 1s0 (vnorm (normalize v1)))
	(assert-equal 1s0 (vnorm (normalize* v1)))
	(assert-eql   vv (normalize v1 vv))
	(assert-eql   vv (normalize* v1 vv))))

(define-test vector-addition
    (let ((aa (coerce 3 'single-float))
	  (v1 (v 'single-float 0 1 2 3))
	  (v2 (v 'single-float 2 3 5 7))
	  (vv (v 'single-float 0 0 0 0)))
	(assert-equality #'vector-equal (v 'single-float 2 4 7 10) (v+ v1 v2))
	(assert-equality #'vector-equal (v 'single-float 2 4 7 10) (v+ v2 v1))
	(assert-equality #'vector-equal (v+ v1 v2 vv) (v+ v1 v2))
	(assert-eql vv (v+ v1 v2 vv))
	(assert-false (eql v1 (v+ v1 v2)))
	(assert-false (eql v2 (v+ v1 v2)))
	(assert-equality #'vector-equal (v 'single-float 3 4 5 6) (v+ v1 aa))
	(assert-equality #'vector-equal (v+ v1 aa vv) (v+ v1 aa))))

(define-test vector-subtraction
    (let ((aa (coerce 3 'single-float))
	  (v1 (v 'single-float 0 1 2 3))
	  (v2 (v 'single-float 2 3 5 7))
	  (vv (v 'single-float 0 0 0 0)))
	(assert-equality #'vector-equal (v 'single-float 2 2 3 4) (v- v2 v1))
	(assert-equality #'vector-equal (v- v1 v2 vv) (v- v1 v2))
	(assert-eql vv (v- v1 v2 vv))
	(assert-false (eql v1 (v- v1 v2)))
	(assert-false (eql v2 (v- v1 v2)))
	(assert-equality #'vector-equal (v 'single-float -3 -2 -1 0) (v- v1 aa))
	(assert-equality #'vector-equal (v- v1 aa vv) (v- v1 aa))))

(define-test vector-multiplication
    (let ((aa (coerce 3 'single-float))
	  (v1 (v 'single-float 0 1 2 3))
	  (v2 (v 'single-float 2 3 5 7))
	  (vv (v 'single-float 0 0 0 0)))
	(assert-equality #'vector-equal (v 'single-float 0 3 10 21) (v* v1 v2))
	(assert-equality #'vector-equal (v 'single-float 0 3 10 21) (v* v2 v1))
	(assert-equality #'vector-equal (v* v1 v2 vv) (v* v1 v2))
	(assert-eql vv (v* v1 v2 vv))
	(assert-false (eql v1 (v* v1 v2)))
	(assert-false (eql v2 (v* v1 v2)))
	(assert-equality #'vector-equal (v 'single-float 0 3 6 9) (v* v1 aa))
	(assert-equality #'vector-equal (v* v1 aa vv) (v* v1 aa))))

(define-test vector-division
    (let ((aa (coerce 3 'single-float))
	  (v1 (v 'single-float 1 3 6 9))
	  (v2 (v 'single-float 3 3 6 9))
	  (vv (v 'single-float 0 0 0 0)))
	(assert-equality #'vector-equal (v 'single-float 1/3 1 1 1) (v/ v1 v2))
	(assert-equality #'vector-equal (v 'single-float 3   1 1 1) (v/ v2 v1))
	(assert-equality #'vector-equal (v/ v1 v2 vv) (v/ v1 v2))
	(assert-eql vv (v/ v1 v2 vv))
	(assert-false (eql v1 (v/ v1 v2)))
	(assert-false (eql v2 (v/ v1 v2)))
	(assert-equality #'vector-equal (v 'single-float 1/3 1 2 3) (v/ v1 aa))
	(assert-equality #'vector-equal (v/ v1 aa vv) (v/ v1 aa))))

(define-test vector-dot-product
    (let ((aa (coerce 3 'single-float))
	  (v1 (v 'single-float 0 1 2 3))
	  (v2 (v 'single-float 2 3 5 7))
	  (vv (v 'single-float 0 0 0 0)))
	(assert-equal 34s0 (v. v1 v2))
	(assert-equal 34s0 (v. v2 v1))
	(assert-equal 34s0 (v. v1 v2 vv))
	(assert-equal 18s0 (v. v1 aa))
	(assert-equal 18s0 (v. v1 aa vv))))
